stages:
- stage: Build_${{parameters.infrastructure}}
  displayName: '${{parameters.SourceDirectory}} Build Stage'
  pool: $(Pipeline-Agent)
  
  jobs:
  - job: tfplan_scan_publish
    timeoutInMinutes: 10
    workspace:
      clean: all
    steps:
    - checkout: self
    - template: checkov-terraform_install.yml

    - bash: | 
        terraform init -upgrade -reconfigure -input=false \
          -backend-config="resource_group_name=$(RGName)" \
          -backend-config="storage_account_name=$(StorageAccName)" \
          -backend-config="container_name=$(ContainerName)" \
          -backend-config="key=${{parameters.BlobName}}" \
          -backend-config="use_azuread_auth=true"
        terraform validate
        terraform plan -out='${{parameters.tfplan}}' -lock=false -input=false 
      env:
        ARM_CLIENT_ID: $(SPN2-client-id)
        ARM_TENANT_ID: $(SPN2-tenant-id)
        ARM_CLIENT_SECRET: $(SPN2-client-secret)
        ARM_SUBSCRIPTION_ID: $(SPN2-subscription-id)
      workingDirectory: ${{parameters.SourceDirectory}}
      displayName: 'terraform init, validate and plan'
      continueOnError: false

    - bash: |
        terraform show -json ${{parameters.tfplan}} | jq > '${{parameters.tfplan}}.json'
        checkov -f '${{parameters.tfplan}}.json' --output sarif --quiet \
          --enable-secret-scan-all-files --deep-analysis --framework terraform_plan
        mv 'results.sarif' 'tfplan.sarif'
      displayName: 'output tfplan.json file and scan'
      workingDirectory: ${{parameters.SourceDirectory}}
      continueOnError: true

    - bash: |
        checkov -d . --output sarif --quiet --deep-analysis \
          --enable-secret-scan-all-files --framework azure_pipelines
        mv 'results.sarif' 'pipelines.sarif'
      displayName: 'scan azure pipelines and move results into "${{parameters.SourceDirectory}}"'
      workingDirectory: '$(Pipeline.Workspace)' 
      continueOnError: true
 
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '${{parameters.SourceDirectory}}'
        artifact: '${{parameters.tfplan}}-artifact' # artifactName
        publishLocation: 'pipeline' # upload artifact to pipeline
      displayName: 'Publish artifact'
   
- stage: Deploy_${{parameters.infrastructure}}
  displayName: '${{parameters.SourceDirectory}} Deploy Stage'
  pool:
    name: $(Pipeline-Agent)

  jobs:
  - deployment: apply
    workspace:
      clean: all
    environment: $(ADO-Environment)        
    strategy:
      runOnce:
        deploy:
          steps:
          - download: none
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: '${{parameters.tfplan}}-artifact'
              targetPath: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Download artifact'

          - template: checkov-terraform_install.yml
          
          - bash: |
              chmod -R a+x .terraform/*
              terraform init -input=false \
                -backend-config="resource_group_name=$(RGName)" \
                -backend-config="storage_account_name=$(StorageAccName)" \
                -backend-config="container_name=$(ContainerName)" \
                -backend-config="key=${{parameters.BlobName}}" \
                -backend-config="use_azuread_auth=true"
              terraform apply -auto-approve -input=false '-lock-timeout=2m' '${{parameters.tfplan}}' 
              rm -rf *  # Remove artifacts after use
            env:
              ARM_CLIENT_ID: $(SPN2-client-id)
              ARM_TENANT_ID: $(SPN2-tenant-id)
              ARM_CLIENT_SECRET: $(SPN2-client-secret)
              ARM_SUBSCRIPTION_ID: $(SPN2-subscription-id)
            displayName: 'terraform apply'
            workingDirectory: '$(Build.ArtifactStagingDirectory)'
            